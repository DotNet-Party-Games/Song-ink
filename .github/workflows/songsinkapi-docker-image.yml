name: DockerApiPipe

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  WORKING_DIRECTORY: Back-End/SongsinkWebApi
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 5.0.x
  
jobs:

  build:

    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
    # Build and Test API ----------------------------------------------------------------------------
      - name: Setup ASP.NET API
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: Restore dependencies
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}
      - name: Build
        run: dotnet build ${{ env.WORKING_DIRECTORY }} --configuration ${{ env.CONFIGURATION }} --no-restore
      - name: Test
        run: dotnet test ${{ env.WORKING_DIRECTORY }} --no-build --verbosity normal
    # Build and Test API ----------------------------------------------------------------------------
    
    # SONAR CLOUD -----------------------------------------------------------------------------------
      - name: Sonarscan-dotnet
    # You may pin to the exact commit or the version.
    # uses: highbyte/sonarscan-dotnet@90025f8a91fb480278dbd6cf740ee9d862f7794c
        uses: highbyte/sonarscan-dotnet@v2.1.1-beta
        with:
          # The key of the SonarQube project
          sonarProjectKey: DotNet-Party-Games_Song-ink
          # The name of the SonarQube project
          sonarProjectName: Song-ink
          # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
          sonarOrganization: dotnet-party-games
          # Optional command arguments to 'dotnet build'
          dotnetBuildArguments: ${{ env.WORKING_DIRECTORY }}
          # Optional command arguments to 'dotnet test'
          dotnetTestArguments: ${{ env.WORKING_DIRECTORY }} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          # Optional. Set to 1 or true to not run 'dotnet test' command
#           dotnetDisableTests: # optional
          # Optional extra command arguments the the SonarScanner 'begin' command
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" -d:sonar.exclusions="**/Migrations/**"
          # The SonarQube server URL. For SonarCloud, skip this setting.
#           sonarHostname: # optional, default is https://sonarcloud.io
          
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    # SONAR CLOUD -----------------------------------------------------------------------------------
    
    # Build and Push Image to DockerHub -------------------------------------------------------------
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./Back-End
          file: ./Back-End/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USER}}/songsinkapi:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
    # Build and Push Image to DockerHub -------------------------------------------------------------
